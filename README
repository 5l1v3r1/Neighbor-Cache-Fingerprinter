                                     __         _______    _______ 
                                    ( (    /|  (  ____ \  (  ____ \
                                    |  \  ( |  | (    \/  | (    \/
                                    |   \ | |  | |        | (__    
                                    | (\ \) |  | |        |  __)   
                                    | | \   |  | |        | (      
                                    | )  \  |  | (____/\  | )      
                                    |/    )_)  (_______/  |/       
 
                                   Neighbor Cache Fingerprinter

                Operating System Detection via Extrapolation of ARP Cache Characteristics


===================================================================================================
                                           Introduction
===================================================================================================

WARNING: This research project still under development. Check back later for a more usable prototype.

	First, what is the Neighbor Cache? The Neighbor Cache is an operating system's mapping of network
addresses to link layer addresses maintained and updated via the protocol ARP (Address Resolution 
Protocol) in IPv4 or NDP (Neighbor Discovery Protocol) in IPv6. The neighbor cache can be as simple
as a lookup table updated everytime an ARP or NDP reply is seen, to something as complex as a cache
that has multiple timeout values for eath entry, which are updated based on positive feedback from
higher level protocols and usage characteristics of that entry by the operating system's applications,
along with restrictions on malformed or unsolicited update packets.

        This tool provides a mechanism for remote operating system detection by extrapolating 
characteristics of the target system's underlying Neighbor Cache. Given the non-existence of any 
standard specification for how the Neighbor Cache should behave, there several differences in 
operating system network stack implementations that can be used for unique identification.

        Traditional operating system fingerprinting tools such as nmap and xprobe2 rely on 
creating fingerprints from highel level protcols such as TCP, UDP, and ICMP. The downside of
these tools is that they usually require open TCP ports and responses to ICMP probes. This tool
works by sending a TCP SYN packet to a port which can be either open or closed. The target machine
will either respond with a SYN/ACK packet or a SYN/RST packet, but either way it must first discover
the MAC address to send the reply to via queries to the ARP Neighbor Cache. This allows for 
fingerprinting on target machines that have nothing but closed TCP ports and give no ICMP responses.

        The main disadvantage of this tool versus traditional fingerprinting is that because it's
based on a Layer 2 protocol instead of a Layer 3 protocol, the target machine that is being tested 
must reside on the same Ethernet broadcast domain (usually the same physical network).


===================================================================================================
                Fingerprint Technique: Number of ARP Requests
===================================================================================================

        When an operating system performs an ARP query it will often resend the request multiple
times in case the request or the reply was lost. A simple count of the number of requests that
are sent can provide a fingerprint feature. In addition, there can be differences in the number
of responses to open and closed ports due to multiple retries on the higher level protocols.

For example, 
        Windows XP:  Sends 1 request

        Windows 7:   Sends 3 if probe to closed port
                     Sends 9 if probe to open port

        Linux:       Sends 3 requests

Testing this is as simple as sending the SYN probe and watching the result.

===================================================================================================
                Fingerprint Technique: Timing of ARP Request Retries
===================================================================================================

        On hosts that retry ARP requests, the timing values can be used to deduce more information.
Linux hosts generally have a constant retry time of 1 second, while Windows hosts generally 
back off on the timing, sending their first retry after about 850ms and their second retry after 1 second.

Testing this is as simple as sending the SYN probe and watching the result.


===================================================================================================
                Fingerprint Technique: Time before sending another ARP Request
===================================================================================================

        After a proper request/reply ARP exchange, the Neighbor Cache gets an entry put in it for
the IP address and for a certain amount of time communication will continue without additional ARP
requests. At some point, the operating system will decide the entry in the cache is stale and make
an attempt to update it by sending a new ARP request. 

	To test this a SYN packet is sent, an ARP exchange happens, and then SYN packets are sent
once per second until another ARP request is seen. 

Operating system response examples,
        Windows XP                     : Timeout after 10 minutes (if referred to, else 2 minutes)
        Windows 7/Vista/Server 2008    : Timeout between 15 seconds and 45 seconds
        Freebsd                        : Timeout after 20 minutes
        Linux                          : Timeout usually 30 seconds (base_reachable_time + delay_first_probe_time)

Some more research needs to be done on the best way to capture the values of delay_first_probe_time
and differences between stale timing and actually falling out of the table and beig gc'ed in Linux.

===================================================================================================
                Fingerprint Technique: Response to Gratuitous ARP Replies
===================================================================================================

        A gratuitous or unsolicited ARP reply is an ARP reply for which there was no request. 
There are several variations of the gratuitous ARP packet that can be generated by changing the 
following fields,

        Ethernet Frame Destination Address: ethernet bcast, or the MAC of the host we're probing
        ARP Target Hardware Address       : 0, ethernet bcast, or the MAC of the host we're probing
        ARP Target Protocol Address       : 0 or the IP address of the host we're probing
        ARP Opcode                        : REPLY or REQUEST

        Note that some devices will respond to the gratuitous request and some will respond to the 
gratuitous reply. There is also a lot of fuzzyness about what the target hardware/protocol
addresses should be, which can be leveraged to provide useful OS version information.

        Most operating systems have the interesting behavior that they will ignore gratuitous ARP
packets if the sender is not in the Neighbor Cache already, but if the sender is in the Neighbor
Cache, they will update the MAC address along with the timeouts. 

        Never dropping gratuitous ARP packets is adjustable in the Linux kernel via
/proc/sys/net/ipv4/conf/all/arp_accept, which defaults to 0.

Testing this feature requires more research. Currently we test by assuming we aren't in the
Neighbor Cache, sending a gratuitous ARP and then a SYN probe, and seeing the result. However,
after this we'll be in the ARP cache because of the SYN response query, so we'll get different
results when we repeat this experiment. This makes testing different gratuitous ARP packet
configurations with the same source IP difficult.

===================================================================================================
                        TODO RESEARCH IN PROGRESS
		Fingerprint Technique: Ignored second ARP replies
===================================================================================================
(http://www-01.ibm.com/support/docview.wss?uid=swg1IO06154) 

There was a change in the ARP code way back in 1994 such that
if an ARP update for the same IP address is received within an
800ms window, ignore the second ARP. 

TODO: Can we use this for fingerprinting via double ARP replies and checking which is used?

Verified that this happen in Linux via the locktime setting (default 1 second),

897                 /* If several different ARP replies follows back-to-back,
898                    use the FIRST one. It is possible, if several proxy
899                    agents are active. Taking the first reply prevents
900                    arp trashing and chooses the fastest router.
901                  */
902                 override = time_after(jiffies, n->updated + n->parms->locktime);


===================================================================================================
                        TODO RESEARCH IN PROGRESS
	Fingerprint Technique: Feedback from higher protcols extending timeout values
===================================================================================================

Linux has the ability to extend timeout values if there's positive feedback from higher level
protocols, such as a 3 way TCP handshake. Need to write tests for this and do some source diving
in the kernel to see what else counts besides a 3 way handshake for positive feedback.

===================================================================================================
                        TODO RESEARCH IN PROGRESS
	Fingerprint Technique: Infer Neighbor Cache size by flooding to cause entry dumping
===================================================================================================

Can we fill the ARP table with garbage entries in order for it to start dumping old ones? 
Can we reliably use this to infer the table size, even with Linux's near random 
cache garbage collection rules? Can we do this on class A networks, or do we really
need class B network subnets in order to make this a viable test?


